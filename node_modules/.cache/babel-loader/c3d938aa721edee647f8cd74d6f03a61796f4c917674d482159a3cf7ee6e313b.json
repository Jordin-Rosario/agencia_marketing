{"ast":null,"code":"\"use client\";\n\n// src/use-button-group.ts\nimport { buttonGroup } from \"@nextui-org/theme\";\nimport { mapPropsVariants, useProviderContext } from \"@nextui-org/system\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { useMemo, useCallback } from \"react\";\nimport { objectToDeps } from \"@nextui-org/shared-utils\";\nfunction useButtonGroup(originalProps) {\n  var _a, _b;\n  const globalContext = useProviderContext();\n  const [props, variantProps] = mapPropsVariants(originalProps, buttonGroup.variantKeys);\n  const {\n    ref,\n    as,\n    children,\n    color = \"default\",\n    size = \"md\",\n    variant = \"solid\",\n    radius,\n    isDisabled = false,\n    isIconOnly = false,\n    disableRipple = (_a = globalContext == null ? void 0 : globalContext.disableRipple) != null ? _a : false,\n    disableAnimation = (_b = globalContext == null ? void 0 : globalContext.disableAnimation) != null ? _b : false,\n    className,\n    ...otherProps\n  } = props;\n  const Component = as || \"div\";\n  const domRef = useDOMRef(ref);\n  const classNames = useMemo(() => buttonGroup({\n    ...variantProps,\n    className\n  }), [objectToDeps(variantProps), className]);\n  const context = useMemo(() => ({\n    size,\n    color,\n    variant,\n    radius,\n    isIconOnly,\n    isDisabled,\n    disableAnimation,\n    disableRipple,\n    fullWidth: !!(originalProps == null ? void 0 : originalProps.fullWidth)\n  }), [size, color, variant, radius, isDisabled, isIconOnly, disableAnimation, disableRipple, originalProps == null ? void 0 : originalProps.fullWidth]);\n  const getButtonGroupProps = useCallback(() => ({\n    role: \"group\",\n    ...otherProps\n  }), [otherProps]);\n  return {\n    Component,\n    children,\n    domRef,\n    context,\n    classNames,\n    getButtonGroupProps\n  };\n}\nexport { useButtonGroup };","map":{"version":3,"names":["buttonGroup","mapPropsVariants","useProviderContext","useDOMRef","useMemo","useCallback","objectToDeps","useButtonGroup","originalProps","_a","_b","globalContext","props","variantProps","variantKeys","ref","as","children","color","size","variant","radius","isDisabled","isIconOnly","disableRipple","disableAnimation","className","otherProps","Component","domRef","classNames","context","fullWidth","getButtonGroupProps","role"],"sources":["C:/Users/Jordin Rosario/agencia/agencia_marketing/node_modules/@nextui-org/button/dist/chunk-O2AYGUH3.mjs"],"sourcesContent":["\"use client\";\r\n\r\n// src/use-button-group.ts\r\nimport { buttonGroup } from \"@nextui-org/theme\";\r\nimport {\r\n  mapPropsVariants,\r\n  useProviderContext\r\n} from \"@nextui-org/system\";\r\nimport { useDOMRef } from \"@nextui-org/react-utils\";\r\nimport { useMemo, useCallback } from \"react\";\r\nimport { objectToDeps } from \"@nextui-org/shared-utils\";\r\nfunction useButtonGroup(originalProps) {\r\n  var _a, _b;\r\n  const globalContext = useProviderContext();\r\n  const [props, variantProps] = mapPropsVariants(originalProps, buttonGroup.variantKeys);\r\n  const {\r\n    ref,\r\n    as,\r\n    children,\r\n    color = \"default\",\r\n    size = \"md\",\r\n    variant = \"solid\",\r\n    radius,\r\n    isDisabled = false,\r\n    isIconOnly = false,\r\n    disableRipple = (_a = globalContext == null ? void 0 : globalContext.disableRipple) != null ? _a : false,\r\n    disableAnimation = (_b = globalContext == null ? void 0 : globalContext.disableAnimation) != null ? _b : false,\r\n    className,\r\n    ...otherProps\r\n  } = props;\r\n  const Component = as || \"div\";\r\n  const domRef = useDOMRef(ref);\r\n  const classNames = useMemo(\r\n    () => buttonGroup({\r\n      ...variantProps,\r\n      className\r\n    }),\r\n    [objectToDeps(variantProps), className]\r\n  );\r\n  const context = useMemo(\r\n    () => ({\r\n      size,\r\n      color,\r\n      variant,\r\n      radius,\r\n      isIconOnly,\r\n      isDisabled,\r\n      disableAnimation,\r\n      disableRipple,\r\n      fullWidth: !!(originalProps == null ? void 0 : originalProps.fullWidth)\r\n    }),\r\n    [\r\n      size,\r\n      color,\r\n      variant,\r\n      radius,\r\n      isDisabled,\r\n      isIconOnly,\r\n      disableAnimation,\r\n      disableRipple,\r\n      originalProps == null ? void 0 : originalProps.fullWidth\r\n    ]\r\n  );\r\n  const getButtonGroupProps = useCallback(\r\n    () => ({\r\n      role: \"group\",\r\n      ...otherProps\r\n    }),\r\n    [otherProps]\r\n  );\r\n  return {\r\n    Component,\r\n    children,\r\n    domRef,\r\n    context,\r\n    classNames,\r\n    getButtonGroupProps\r\n  };\r\n}\r\n\r\nexport {\r\n  useButtonGroup\r\n};\r\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA,SAASA,WAAW,QAAQ,mBAAmB;AAC/C,SACEC,gBAAgB,EAChBC,kBAAkB,QACb,oBAAoB;AAC3B,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,OAAO,EAAEC,WAAW,QAAQ,OAAO;AAC5C,SAASC,YAAY,QAAQ,0BAA0B;AACvD,SAASC,cAAcA,CAACC,aAAa,EAAE;EACrC,IAAIC,EAAE,EAAEC,EAAE;EACV,MAAMC,aAAa,GAAGT,kBAAkB,CAAC,CAAC;EAC1C,MAAM,CAACU,KAAK,EAAEC,YAAY,CAAC,GAAGZ,gBAAgB,CAACO,aAAa,EAAER,WAAW,CAACc,WAAW,CAAC;EACtF,MAAM;IACJC,GAAG;IACHC,EAAE;IACFC,QAAQ;IACRC,KAAK,GAAG,SAAS;IACjBC,IAAI,GAAG,IAAI;IACXC,OAAO,GAAG,OAAO;IACjBC,MAAM;IACNC,UAAU,GAAG,KAAK;IAClBC,UAAU,GAAG,KAAK;IAClBC,aAAa,GAAG,CAACf,EAAE,GAAGE,aAAa,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,aAAa,CAACa,aAAa,KAAK,IAAI,GAAGf,EAAE,GAAG,KAAK;IACxGgB,gBAAgB,GAAG,CAACf,EAAE,GAAGC,aAAa,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,aAAa,CAACc,gBAAgB,KAAK,IAAI,GAAGf,EAAE,GAAG,KAAK;IAC9GgB,SAAS;IACT,GAAGC;EACL,CAAC,GAAGf,KAAK;EACT,MAAMgB,SAAS,GAAGZ,EAAE,IAAI,KAAK;EAC7B,MAAMa,MAAM,GAAG1B,SAAS,CAACY,GAAG,CAAC;EAC7B,MAAMe,UAAU,GAAG1B,OAAO,CACxB,MAAMJ,WAAW,CAAC;IAChB,GAAGa,YAAY;IACfa;EACF,CAAC,CAAC,EACF,CAACpB,YAAY,CAACO,YAAY,CAAC,EAAEa,SAAS,CACxC,CAAC;EACD,MAAMK,OAAO,GAAG3B,OAAO,CACrB,OAAO;IACLe,IAAI;IACJD,KAAK;IACLE,OAAO;IACPC,MAAM;IACNE,UAAU;IACVD,UAAU;IACVG,gBAAgB;IAChBD,aAAa;IACbQ,SAAS,EAAE,CAAC,EAAExB,aAAa,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,aAAa,CAACwB,SAAS;EACxE,CAAC,CAAC,EACF,CACEb,IAAI,EACJD,KAAK,EACLE,OAAO,EACPC,MAAM,EACNC,UAAU,EACVC,UAAU,EACVE,gBAAgB,EAChBD,aAAa,EACbhB,aAAa,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,aAAa,CAACwB,SAAS,CAE5D,CAAC;EACD,MAAMC,mBAAmB,GAAG5B,WAAW,CACrC,OAAO;IACL6B,IAAI,EAAE,OAAO;IACb,GAAGP;EACL,CAAC,CAAC,EACF,CAACA,UAAU,CACb,CAAC;EACD,OAAO;IACLC,SAAS;IACTX,QAAQ;IACRY,MAAM;IACNE,OAAO;IACPD,UAAU;IACVG;EACF,CAAC;AACH;AAEA,SACE1B,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}